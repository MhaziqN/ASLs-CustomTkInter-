from tkinter import *
import customtkinter
from PIL import ImageTk,Image
import cv2
from cvzone.HandTrackingModule import HandDetector
from cvzone.ClassificationModule import Classifier
import numpy as np
import math
import time
import pyttsx3


customtkinter.set_appearance_mode("System")  # Modes: "System" (standard), "Dark", "Light"
customtkinter.set_default_color_theme("green")  # Themes: "blue" (standard), "green", "dark-blue"


class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()

        self.title ('ASLDs')
        self.minsize(780, 520)
        self.iconbitmap('AS (1).ico')

        #===============Create Two Frame===============================

        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)

        self.frame_left = customtkinter.CTkFrame(master=self,
                                                 width=180,
                                                 corner_radius=0)
        self.frame_left.grid(row=0, column=0, sticky="nswe")

        self.frame_right = customtkinter.CTkFrame(master=self)
        self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

        # ============ frame_left ============

        # configure grid layout (1x11)
        self.frame_left.grid_rowconfigure(0, minsize=10)  # empty row with minsize as spacing
        self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
        self.frame_left.grid_rowconfigure(8, minsize=20)  # empty row with minsize as spacing
        self.frame_left.grid_rowconfigure(11, minsize=10)  # empty row with minsize as spacing

        self.label_1 = customtkinter.CTkLabel(master=self.frame_left,
                                              text="Option",
                                              text_font=("Roboto Medium", -16))  # font name and size in px
        self.label_1.grid(row=1, column=0, pady=10, padx=10)

        self.button_1 = customtkinter.CTkButton(master=self.frame_left,
                                                text="Scan Gesture",
                                                command= self.ScanButton
                                                )
        self.button_1.grid(row=2, column=0, pady=10, padx=20)

        self.button_2 = customtkinter.CTkButton(master=self.frame_left,
                                                command=self.AddGesture,
                                                text="New Gesture",
                                                )
        self.button_2.grid(row=3, column=0, pady=10, padx=20)

        self.button_3 = customtkinter.CTkButton(master=self.frame_left,
                                                text="Exit",
                                                command =self.Exit,
                                               )
        self.button_3.grid(row=4, column=0, pady=10, padx=20)

        self.label_mode = customtkinter.CTkLabel(master=self.frame_left, text="Appearance Mode:")
        self.label_mode.grid(row=9, column=0, pady=0, padx=20, sticky="w")

        self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                        values=["Light", "Dark", "System"],
                                                        command= self.Change_Appearance_M
                                                        )
        self.optionmenu_1.grid(row=10, column=0, pady=10, padx=20, sticky="w")

        #====================== frame_right =================================

        self.frame_right.rowconfigure((0,1,2,3), weight=1)
        self.frame_right.rowconfigure(7, weight=10)
        self.frame_right.columnconfigure((0, 1), weight=1)
        self.frame_right.columnconfigure(2, weight=0)

#       self.frame_info = customtkinter.CTkFrame(master=self.frame_right)
#       self.frame_info.grid(row=0, column=0, columnspan=2, rowspan=4, pady=20, padx=20, sticky="nsew")

#        self.frame_info.rowconfigure(0,weight=1)
#        self.frame_info.columnconfigure(0,weight=1)

        self.imageLogo = customtkinter.CTkButton(master = self.frame_right,
                                                 fg_color=None, hover=False,
                                                 text="",
                                                 image =ImageTk.PhotoImage(Image.open("AS.png") )
                                                 )

        self.imageLogo.grid(row =0, column =2, columnspan = 2,rowspan=2, pady= 10, padx=10)


    def Exit(self):
        self.destroy()

    def Change_Appearance_M (Self, new_appearance_mode) :
        customtkinter.set_appearance_mode(new_appearance_mode)

    def ScanButton (self):

        def talk (labels):
            engine.say(labels)
            engine.runAndWait()

        customtkinter.set_appearance_mode("System")  # Modes: "System" (standard), "Dark", "Light"
        customtkinter.set_default_color_theme("green")  # Themes: "blue" (standard), "green", "dark-blue"

        cap = cv2.VideoCapture(0)
        detector = HandDetector(maxHands=1)
        classifier = Classifier("Model/keras_model.h5", "Model/labels.txt")
        engine = pyttsx3.init()
        voice = engine.getProperty('voice')
        engine.setProperty('voice', voice[0])

        offset = 20
        imgsize = 300

        folder = " D:\Cisco\Phyton\pythonProject\A"
        counter = 0

        labels = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",
                  "U", "V", "W",
                  "X", "Y", "Z"]

        while True:
            success, img = cap.read()
            imgOutput = img.copy()
            hands, img = detector.findHands(img)
            if hands:
                hand = hands[0]
                x, y, w, h = hand['bbox']

                imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                imgCropShape = imgCrop.shape

                # Image collector Resolution Capture

                aspectRatio = h / w

                if aspectRatio > 1:
                    k = imgsize / h  # Video capture Hight+Size Resolution
                    wCal = math.ceil(k * w)
                    imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                    imgResizeShape = imgResize.shape
                    wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                    imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution
                    prediction, index = classifier.getPrediction(imgWhite, draw=False)
                    print(prediction, index)


                else:
                    k = imgsize / w  # Video capture data more than rectangle size that being set
                    hCal = math.ceil(k * h)
                    imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                    imgResizeShape = imgResize.shape
                    hGap = math.ceil((imgsize - hCal) / 2)
                    imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution
                    prediction, index = classifier.getPrediction(imgWhite, draw=False)
                    # HIGHT                              #LENGHT                          #cOLOUR CODE    #cOLOUR FILLED BOXES
                cv2.rectangle(imgOutput, (x - offset, y - offset - 50), (x + w + offset - 50, y - offset - 50 + 50),
                              (255, 64, 64), cv2.FILLED)
                cv2.putText(imgOutput, labels[index], (x, y - 25), cv2.FONT_HERSHEY_COMPLEX, 2, (240, 248, 255), 2)
                cv2.rectangle(imgOutput, (x - offset, y - offset), (x + w + offset, y + h + offset), (255, 64, 64), 4)
                # talk(labels[index])

                cv2.imshow("ImageCrop", imgCrop)
                cv2.imshow("ImageWhite", imgWhite)

            # for image collector jangan terlalu dekat nnti error
            # jauh kit

            cv2.imshow("Image", imgOutput)
            Key = cv2.waitKey(1)
#           "S" key function for captured input function from live input
            if Key == ord('s'):
                talk('successfully captured !')
                with open('Word.txt', "a") as f:
                    f.write(labels[index])
#           "a" Key function for clear data in 'Word.txt' file
            elif Key == ord('a'):
                file = open("Word.txt", "r+")
                file.truncate(0)
                file.close()
#           "d' KEy function fro read 'r' line phrases in 'Word.txt' file
            elif Key == ord('d'):

                with open('Word.txt', "r") as f:
                    for line in f.readlines():
                        print(line)
                        class App(customtkinter.CTk):

                            def __init__(self):
                                super().__init__()

                                self.title('ASLDs')
                                self.minsize(250, 150)
                                self.iconbitmap('AS (1).ico')

                                self.grid_columnconfigure(1, weight=1)
                                self.grid_rowconfigure(0, weight=1)

                                # ===================== Devide 2 partition ==============================

                                self.frame_left = customtkinter.CTkFrame(master=self,
                                                                         width=180,
                                                                         corner_radius=0)
                                self.frame_left.grid(row=0, column=0, sticky="nswe")

                                self.frame_right = customtkinter.CTkFrame(master=self)
                                self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                # ===================== cfarme left grid conf ==============================
                                # configure grid layout (1x11)
                                self.frame_left.grid_rowconfigure(0, minsize=10)  # empty row with minsize as spacing
                                self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                self.frame_left.grid_rowconfigure(8, minsize=20)  # empty row with minsize as spacing
                                self.frame_left.grid_rowconfigure(11, minsize=10)  # empty row with minsize as spacing

                                self.label = customtkinter.CTkLabel(master=self.frame_left,
                                                                    text="Scan Gesture",
                                                                    text_font=('Roboto Medium', -16))

                                self.label.grid(row=0, column=0, pady=10, padx=10)

                                self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                        text="Exit",
                                                                        command=self.Exit_,
                                                                        text_font=("Roboto Medium", -12))

                                self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                     text='Appearance Mode',
                                                                     text_font=("Roboto Medium", -12))

                                self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                values=['Light', 'Dark', 'System'],
                                                                                command=self.Change_Apearance_Mode
                                                                                )
                                self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                # ================================== frame Right Grid ============================================

                                self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                self.frame_right.columnconfigure((0, 1, 2, 3, 4), weight=1)  # column spacing configure

                                self.labelR1 = customtkinter.CTkLabel(master=self.frame_right,
                                                                      text="Data Translate",
                                                                      text_font=("Roboto Medium", -16))

                                self.labelR1.grid(row=0, column=2, pady=10, padx=10)

                                self.labelR2 = customtkinter.CTkLabel(master=self.frame_right,
                                                                      text='Word Translated :\n'+line,
                                                                      text_font=('Roboto Medium', -12))

                                self.labelR2.grid(row=1, column=2, pady=10, padx=10)


                                self.ButtonVoice = customtkinter.CTkButton(master=self.frame_right,
                                                                           text='Translated',
                                                                           command=self.Voivetrans_,
                                                                           text_font=('Roboto Medium',-12))
                                self.ButtonVoice.grid(row=3,column=2,pady=10,padx=10)


                            def Change_Apearance_Mode(self, new_appearance_mode):
                                customtkinter.set_appearance_mode(new_appearance_mode)

                            def Exit_(self):
                                self.destroy()

                            def Ok_(self):
                                self.destroy()

                            def Voivetrans_(self):
                                talk(line)

                        if __name__ == "__main__":
                            app = App()
                            app.mainloop()

            if Key == ord('w'):
                cap.close()

    def AddGesture(self):
#======================== Main Interface ==================================
        class App(customtkinter.CTk):
            def __init__(self):
                super().__init__()

                self.title('ASLDs')
                self.minsize(250, 150)
                self.iconbitmap('AS (1).ico')

                self.grid_columnconfigure(1, weight=1)
                self.grid_rowconfigure(0, weight=1)

# ===================== Devide 2 partition ==============================

                self.frame_left = customtkinter.CTkFrame(master=self,
                                                          width=180,
                                                          corner_radius=0)
                self.frame_left.grid(row=0, column=0, sticky="nswe")

                self.frame_right = customtkinter.CTkFrame(master=self)
                self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

 # ===================== cfarme left grid conf ==============================
                # configure grid layout (1x11)
                self.frame_left.grid_rowconfigure(0, minsize=10)  # empty row with minsize as spacing
                self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                self.frame_left.grid_rowconfigure(8, minsize=20)  # empty row with minsize as spacing
                self.frame_left.grid_rowconfigure(11, minsize=10)  # empty row with minsize as spacing

                self.label = customtkinter.CTkLabel(master=self.frame_left,
                                                      text="New Gesture",
                                                      text_font=('Roboto Medium', -16))

                self.label.grid(row=0, column=0, pady=10, padx=10)

                self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                         text="Exit",
                                                         command=self.Exit_,
                                                         text_font=("Roboto Medium", -12))

                self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                      text='Appearance Mode',
                                                      text_font=("Roboto Medium", -12))

                self.Label2.grid(row=7, column=0, pady=10, padx=10)

                self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                 values=['Light', 'Dark', 'System'],
                                                                 command=self.Change_Apearance_Mode
                                                                 )
                self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

# ================================== frame Right Grid ============================================

                self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                self.frame_right.columnconfigure((0, 1, 2, 3, 4), weight=1)  # column spacing configure

                self.labelR1 = customtkinter.CTkLabel(master=self.frame_right,
                                                       text="New Data Collection",
                                                       text_font=("Roboto Medium", -16))

                self.labelR1.grid(row=0, column=2, pady=10, padx=10)

                self.labelR2 = customtkinter.CTkLabel(master=self.frame_right,
                                                       text='Please choose your Alphabet option for Data collection A-Z',
                                                       text_font=('Roboto Medium', -12))

                self.labelR2.grid(row=1, column=2, pady=10, padx=10)

                self.EntryNDE = customtkinter.CTkEntry(master=self.frame_right,
                                                        width=140,
                                                        placeholder_text=" Enter New Value",
                                                        )

                self.EntryNDE.grid(row=2, column=2, pady=10, padx=10)

                self.ButtonOk = customtkinter.CTkButton(master=self.frame_right,
                                                         text="Ok",
                                                         command=self.Ok_Button,
                                                         text_font=('Roboto Medium', -12))

                self.ButtonOk.grid(row=7, column=2, pady=10, padx=10)

            def Change_Apearance_Mode(self, new_appearance_mode):
                customtkinter.set_appearance_mode(new_appearance_mode)

            def Exit_(self):
                self.destroy()

            def Ok_Button(self):
                UserC_ = self.EntryNDE.get()

                if UserC_.lower() == 'a':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\A"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                              width=180,
                                                                              corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                       minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                       minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                       minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                          text="New Gesture",
                                                                          text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                             text="Exit",
                                                                             command=self.Exit_,
                                                                             text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                          text='Appearance Mode',
                                                                          text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                     values=['Light', 'Dark', 'System'],
                                                                                     command=self.Change_Apearance_Mode
                                                                                     )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                      weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                                text="Successfully add " +
                                                                                     str(counter) + " data capture !!",
                                                                                text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)


                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'b':

                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\B"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'c':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\C"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'd':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\D"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'e':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\E"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'f':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\F"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'g':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\G"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'h':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\H"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'i':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\I"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'j':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\J"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'k':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\K"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'l':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\L"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'm':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\M"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'n':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\AN"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'o':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\O"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'p':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\P"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'q':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\Q"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'r':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\R"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 's':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\S"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 't':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\T"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'u':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\OU"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'v':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\V"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'w':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\W"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'x':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\X"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'y':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\Y"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
                elif UserC_.lower() == 'z':
                    cap = cv2.VideoCapture(0)
                    detector = HandDetector(maxHands=1)

                    offset = 20
                    imgsize = 300

                    folder = "D:\Cisco\Phyton\pythonProject\Z"
                    counter = 0

                    while True:
                        success, img = cap.read()
                        hands, img = detector.findHands(img)
                        if hands:
                            hand = hands[0]
                            x, y, w, h = hand['bbox']

                            imgWhite = np.ones((imgsize, imgsize, 3), np.uint8) * 255
                            imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

                            imgCropShape = imgCrop.shape

                            # Image collectore Resolution Capture

                            aspectRatio = h / w

                            if aspectRatio > 1:
                                k = imgsize / h  # Video capture Hight+Size Resolution
                                wCal = math.ceil(k * w)
                                imgResize = cv2.resize(imgCrop, (wCal, imgsize))
                                imgResizeShape = imgResize.shape
                                wGap = math.ceil((imgsize - wCal) / 2)  # Vide capture Centre postion
                                imgWhite[:, wGap:wCal + wGap] = imgResize  # Declare Resolution

                            else:
                                k = imgsize / w  # Video capture data more than rectangle size that being set
                                hCal = math.ceil(k * h)
                                imgResize = cv2.resize(imgCrop, (imgsize, hCal))
                                imgResizeShape = imgResize.shape
                                hGap = math.ceil((imgsize - hCal) / 2)
                                imgWhite[hGap:hCal + hGap, :] = imgResize  # Declare Resolution

                            cv2.imshow("ImageCrop", imgCrop)
                            cv2.imshow("ImageWhite", imgWhite)

                        # for image collector jangan terlalu dekat nnti error
                        # jauh kit

                        cv2.imshow("Image", img)
                        key = cv2.waitKey(1)
                        if key == ord("s"):
                            counter += 1
                            cv2.imwrite(f'{folder}/Image_{time.time()}.jpg', imgWhite)
                            print(counter)
                        if key == ord('w'):

                            class App(customtkinter.CTk):

                                def Change_Apearance_Mode(self, new_appearance_mode):
                                    customtkinter.set_appearance_mode(new_appearance_mode)

                                def Exit_(self):
                                    self.destroy()

                                def __init__(self):
                                    super().__init__()

                                    self.title('ASLDs')
                                    self.minsize(50, 50)
                                    self.iconbitmap('AS (1).ico')

                                    self.grid_columnconfigure(1, weight=1)
                                    self.grid_rowconfigure(0, weight=1)

                                    # ===================== Devide 2 partition ==============================

                                    self.frame_left = customtkinter.CTkFrame(master=self,
                                                                             width=180,
                                                                             corner_radius=0)
                                    self.frame_left.grid(row=0, column=0, sticky="nswe")

                                    self.frame_right = customtkinter.CTkFrame(master=self)
                                    self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

                                    # ===================== cfarme left grid conf ==============================

                                    # configure grid layout (1x11)
                                    self.frame_left.grid_rowconfigure(0,
                                                                      minsize=10)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(5, weight=1)  # empty row as spacing
                                    self.frame_left.grid_rowconfigure(8,
                                                                      minsize=20)  # empty row with minsize as spacing
                                    self.frame_left.grid_rowconfigure(11,
                                                                      minsize=10)  # empty row with minsize as spacing

                                    self.label1 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text="New Gesture",
                                                                         text_font=('Roboto Medium', -16))

                                    self.label1.grid(row=0, column=0, pady=10, padx=10)

                                    self.buttonEx = customtkinter.CTkButton(master=self.frame_left,
                                                                            text="Exit",
                                                                            command=self.Exit_,
                                                                            text_font=("Roboto Medium", -12))

                                    self.buttonEx.grid(row=4, column=0, pady=10, padx=10)

                                    self.Label2 = customtkinter.CTkLabel(master=self.frame_left,
                                                                         text='Appearance Mode',
                                                                         text_font=("Roboto Medium", -12))

                                    self.Label2.grid(row=7, column=0, pady=10, padx=10)

                                    self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                                                    values=['Light', 'Dark', 'System'],
                                                                                    command=self.Change_Apearance_Mode
                                                                                    )
                                    self.optionmenu_1.grid(row=8, column=0, pady=10, padx=10)

                                    # ========================= frame Right Grid ====================================

                                    self.frame_right.rowconfigure((0, 1, 2, 3, 4), weight=0)  # row spacing configure
                                    self.frame_right.columnconfigure((0, 1, 2, 3, 4),
                                                                     weight=1)  # column spacing configure

                                    self.LabelCounter = customtkinter.CTkLabel(master=self.frame_right,
                                                                               text="Successfully add " +
                                                                                    str(counter) + " data capture !!",
                                                                               text_font=('Roboto Medium', -12))
                                    self.LabelCounter.grid(row=0, column=2, pady=10, padx=11)

                            if __name__ == "__main__":
                                app = App()
                                app.mainloop()
        if __name__ == "__main__":
            app = App()
            app.mainloop()

if __name__ == "__main__":
    app = App()
    app.mainloop()
